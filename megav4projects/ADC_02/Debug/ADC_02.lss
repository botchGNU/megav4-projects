
ADC_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000671  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a1  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000284  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000329  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  000014bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  74:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_14>:
unsigned char phi_min=0;
unsigned char Z=0;				//ADC-Wert konfigurieren
unsigned char phi_mittel=0;		//Gleitender Mittelwert konfigurieren

ISR(ADC_vect) 
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	6f 93       	push	r22
  8e:	7f 93       	push	r23
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
	Z=ADCH;							//ADC-Wert einlesen	
  94:	85 b1       	in	r24, 0x05	; 5
  96:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Z>
	phi=PHI_MAX*Z/(Z_MAX+1);		//POTI-Stellwinkel berechnen
  9a:	22 ed       	ldi	r18, 0xD2	; 210
  9c:	82 9f       	mul	r24, r18
  9e:	c0 01       	movw	r24, r0
  a0:	11 24       	eor	r1, r1
  a2:	99 23       	and	r25, r25
  a4:	14 f4       	brge	.+4      	; 0xaa <__vector_14+0x2e>
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	9f 4f       	sbci	r25, 0xFF	; 255
  aa:	49 2f       	mov	r20, r25
  ac:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <phi>
	phi_mittel=(phi+phi_alt)/2;		//Gleit.Mittelwert berechnen	
  b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <phi_alt>
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	69 0f       	add	r22, r25
  bc:	71 1d       	adc	r23, r1
  be:	cb 01       	movw	r24, r22
  c0:	95 95       	asr	r25
  c2:	87 95       	ror	r24
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				//Auf LED's ausgeben
	phi_alt=phi;					//Stellw. (alt) aktualisieren
  c8:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <phi_alt>
	if(!(PINA & (1<<PA0) ))
  cc:	c8 99       	sbic	0x19, 0	; 25
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__vector_14+0x5c>
	{
		PORTC=phi_min;
  d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <phi_min>
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <__vector_14+0x68>
	}
	else if(!(PINA & (1<<PA1)))
  d8:	c9 99       	sbic	0x19, 1	; 25
  da:	03 c0       	rjmp	.+6      	; 0xe2 <__vector_14+0x66>
	{
		PORTC = PHI_MAX;
  dc:	82 ed       	ldi	r24, 0xD2	; 210
  de:	85 bb       	out	0x15, r24	; 21
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <__vector_14+0x68>
	}
	else
	{
		PORTC=phi_mittel;	
  e2:	85 bb       	out	0x15, r24	; 21
	}
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	7f 91       	pop	r23
  ea:	6f 91       	pop	r22
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <port_init>:

void port_init()
{
	DDRC=0xFF;			//LED auf Ausgang 
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;			//Alle LED's ausschalten
 100:	15 ba       	out	0x15, r1	; 21
	DDRA&= ~(1<<PA5);	//PA5,PA0,PA1 auf Eingang schalten
 102:	8a b3       	in	r24, 0x1a	; 26
 104:	8f 7d       	andi	r24, 0xDF	; 223
 106:	8a bb       	out	0x1a, r24	; 26
	DDRA&= ~(1<<PA0) | (1<<PA1);
 108:	8a b3       	in	r24, 0x1a	; 26
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	8a bb       	out	0x1a, r24	; 26
	PORTA|= (1<<PA1) | (1<<PA0);
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	83 60       	ori	r24, 0x03	; 3
 112:	8b bb       	out	0x1b, r24	; 27
 114:	08 95       	ret

00000116 <ADC_init>:
}

void ADC_init()
{
	ADMUX|=(1<<MUX0)|(1<<MUX2);		//Multiplexer Einstellung auf Kanal ADC5
 116:	87 b1       	in	r24, 0x07	; 7
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	87 b9       	out	0x07, r24	; 7
	ADMUX|=1<<ADLAR;				//Linksbuendig
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	87 b9       	out	0x07, r24	; 7
	ADMUX|=1<<REFS0;				//Referenzspannung auf VCC 
 122:	87 b1       	in	r24, 0x07	; 7
 124:	80 64       	ori	r24, 0x40	; 64
 126:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA|=1<<ADPS1;				//kadc=64
 128:	86 b1       	in	r24, 0x06	; 6
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	86 b9       	out	0x06, r24	; 6
	ADCSRA|=1<<ADPS2;				
 12e:	86 b1       	in	r24, 0x06	; 6
 130:	84 60       	ori	r24, 0x04	; 4
 132:	86 b9       	out	0x06, r24	; 6
	
	ADCSRA|=1<<ADEN;				//ADC Einschalten
 134:	86 b1       	in	r24, 0x06	; 6
 136:	80 68       	ori	r24, 0x80	; 128
 138:	86 b9       	out	0x06, r24	; 6
	
	ADCSRA|=(1<<ADATE);				//Freilaufbetrieb 
 13a:	86 b1       	in	r24, 0x06	; 6
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	86 b9       	out	0x06, r24	; 6

	ADCSRA|=(1<<ADIE);				//ADC-Interrupt freigeben
 140:	86 b1       	in	r24, 0x06	; 6
 142:	88 60       	ori	r24, 0x08	; 8
 144:	86 b9       	out	0x06, r24	; 6
	ADCSRA|=1<<ADSC;				//Wandlung starten
 146:	86 b1       	in	r24, 0x06	; 6
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	86 b9       	out	0x06, r24	; 6
 14c:	08 95       	ret

0000014e <main>:
}

int main(void)
{
	port_init();			//Funtkion PORT-Initialisierung
 14e:	0e 94 7e 00 	call	0xfc	; 0xfc <port_init>
	ADC_init();				//Funtkion ADC Konfiguration
 152:	0e 94 8b 00 	call	0x116	; 0x116 <ADC_init>
	sei();					//Interrupt Global freigeben
 156:	78 94       	sei
 158:	ff cf       	rjmp	.-2      	; 0x158 <main+0xa>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
