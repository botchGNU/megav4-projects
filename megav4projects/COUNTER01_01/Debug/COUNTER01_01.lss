
COUNTER01_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ec  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000578  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000231  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <start_pulsgenerator>:
//**********************************************************************************
//Funktion für TESTMODE: Timer1 als Frequenzgenerator konfigurieren (Aufruf in main)
//**********************************************************************************
void start_pulsgenerator(void) 
{
  DDRD =   1<<PD5;     // Signalausgabe auf Pin OC1A(PD5)
  6c:	80 e2       	ldi	r24, 0x20	; 32
  6e:	81 bb       	out	0x11, r24	; 17
  TCCR1B = 1<<CS10;    // Normalmode, kH=1 ( => Signalfrequenz=91,554Hz)
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	8e bd       	out	0x2e, r24	; 46
  TCCR1A = 1<<COM1A0;  // Ausgang OC1A(PD5) bei jeden Zählerüberlauf toggeln
  74:	80 e4       	ldi	r24, 0x40	; 64
  76:	8f bd       	out	0x2f, r24	; 47
  78:	08 95       	ret

0000007a <__vector_19>:
//**********************************************************************************

ISR(TIMER0_COMP_vect) // *** ISR für Timer0-Output-Compare ***
//Match-Interrupt bei jedem 10.ten Impulsereignis
//TESTMODE: Interruptrate: 9,155Hz => Dauer Zählzyklus: 27,96sec
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
  if (PORTC < 0xFF) //LED-Maximalwert noch nicht erreicht?
  86:	85 b3       	in	r24, 0x15	; 21
  88:	8f 3f       	cpi	r24, 0xFF	; 255
  8a:	19 f0       	breq	.+6      	; 0x92 <__vector_19+0x18>
  { 
    PORTC++;  // LED-Status inkrementieren
  8c:	85 b3       	in	r24, 0x15	; 21
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	85 bb       	out	0x15, r24	; 21
  }
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <main>:

int main(void)
{ 
  DDRC=0xFF;  //LED-Port: Ausgang für alle LEDs
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
  PORTC=0x00; //alle LEDs ausschalten (default)
  a2:	15 ba       	out	0x15, r1	; 21
  DDRB &= ~(1<<PB0); //Signalpin auf Eingang (default) ...
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	87 bb       	out	0x17, r24	; 23
  PORTB |= (1<<PB0); //...und Pullup einschalten
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	88 bb       	out	0x18, r24	; 24
  TCCR0 = (1<<CS02)|(1<<CS01); //Timer0 konfigurieren: 
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	83 bf       	out	0x33, r24	; 51
                               // -> Taktquelle: Extern über PB0(T0); fallende Flanke
  TCCR0 |= (1<<WGM01);         // -> WGM-Mode: CTC ; COM-Mode: Normal (Pin OC0 nicht aktiv)
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	83 bf       	out	0x33, r24	; 51
  OCR0 = TEILER-1; //Timer0 Vergleichswert für CTC Mode setzen: 
  ba:	89 e0       	ldi	r24, 0x09	; 9
  bc:	8c bf       	out	0x3c, r24	; 60
                   //  -> Interrupt bei jedem 10.ten Impulsereignis
  TIMSK = (1<<OCIE0); // Output-Compare Interrupt für Timer0 individuell freigeben
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	89 bf       	out	0x39, r24	; 57
  sei(); //globale Interruptfreigabe 
  c2:	78 94       	sei

 //**********************************************************************************
   start_pulsgenerator(); //TESTMODE: Frequenzgenerator starten
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <start_pulsgenerator>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x2a>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
