
ADC_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066e  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "my_ADC.h" //ADC Benutzerbibilothek einbinden;
//muss sich im Projektverzeichnis befinden

int main(void)
{
	DDRC=0xFF; //LED auf ausgang
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00; //LED Ausschalten
  70:	15 ba       	out	0x15, r1	; 21
	
	DDRA &= ~(1<<PA5); //PA5 als eingang
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8f 7d       	andi	r24, 0xDF	; 223
  76:	8a bb       	out	0x1a, r24	; 26
	
	ADMUX|=1<<REFS0;  //Referenzspannung auf VCC 5V setzen
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	87 b9       	out	0x07, r24	; 7
	
    /* Replace with your application code */
    while (1) 
    {
		PORTC = read_ADC8(PA5); //Wert an Pin messen und auf LED schreiben
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	0e 94 44 00 	call	0x88	; 0x88 <read_ADC8>
  84:	85 bb       	out	0x15, r24	; 21
  86:	fb cf       	rjmp	.-10     	; 0x7e <main+0x12>

00000088 <read_ADC8>:
unsigned char read_ADC8(unsigned char kanal) //ADC Funktion
//Eine ADC Wandlung durchführen ("polling")
// -> Eingabeparameter: kanal MUX-Kanal (unipolar) 0...7
// -> Rückgabeparamer: ADC-Wert (8 Bit)
 {
	 ADMUX |=(1<<kanal);            //Multiplexer Einstellung
  88:	97 b1       	in	r25, 0x07	; 7
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <read_ADC8+0xc>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <read_ADC8+0x8>
  98:	29 2b       	or	r18, r25
  9a:	27 b9       	out	0x07, r18	; 7
	 ADMUX |=(1<<MUX2);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	87 b9       	out	0x07, r24	; 7
	 ADMUX |=(1<<MUX0);
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	87 b9       	out	0x07, r24	; 7
	 
	 ADMUX|=1<<ADLAR;                    //Ergebnis linksbündig setzen
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	87 b9       	out	0x07, r24	; 7
	 ADMUX|=1<<REFS0;                    //Referenzspannung auf VCC setzen
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	87 b9       	out	0x07, r24	; 7
	 
	 
	 ADCSRA|=1<<ADPS0;                    //kadc=128
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	86 b9       	out	0x06, r24	; 6
	 ADCSRA|=1<<ADPS1;                    //kadc=128
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	86 b9       	out	0x06, r24	; 6
	 ADCSRA|=1<<ADPS2;                    //kadc=128
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	86 b9       	out	0x06, r24	; 6
	 
	 ADCSRA&=~(1<<ADATE);                //Einzelwandlung
  c6:	86 b1       	in	r24, 0x06	; 6
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	86 b9       	out	0x06, r24	; 6
	 
	 ADCSRA|=1<<ADEN;                    //ADC Einschalten
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	86 b9       	out	0x06, r24	; 6
	 
	 ADCSRA|=1<<ADSC;                    //Wandlung starten
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	86 b9       	out	0x06, r24	; 6
	 while(ADCSRA&(1<<ADSC)){;}            //Warten bis Wandlung fertig
  d8:	36 99       	sbic	0x06, 6	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <read_ADC8+0x50>
	 ADCSRA&=~(1<<ADEN);                //ADC ausschalten
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	8f 77       	andi	r24, 0x7F	; 127
  e0:	86 b9       	out	0x06, r24	; 6
	 
	 return ADCH; //8-Bit ADC-Wert übergeben
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
