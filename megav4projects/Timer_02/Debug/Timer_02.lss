
Timer_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000146  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000626  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056f  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000231  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031a  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001322  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <port_init>:

static int count=0;			//Zählvariable initialisieren

void port_init()
{
	DDRC=0xFF;				//LED Port auf Ausgang geschaltet
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;				//alle LED ausschalten
  80:	15 ba       	out	0x15, r1	; 21
  82:	08 95       	ret

00000084 <polling_init>:
}

void polling_init()
{
	while (!(TIFR & (1<<TOV0))){;}				//solgane keine Interrupt an Timer0 angefordert wird warten
  84:	08 b6       	in	r0, 0x38	; 56
  86:	00 fe       	sbrs	r0, 0
  88:	fd cf       	rjmp	.-6      	; 0x84 <polling_init>
	TIFR|=1<<TOV0;				//TOV0 in TIFR zurücksetzen
  8a:	88 b7       	in	r24, 0x38	; 56
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	88 bf       	out	0x38, r24	; 56
	count++;					//Zählvariable inkrementieren
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  94:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (count>=COUNT_MAX)		//Abfrage ob Zählvariable größer gleich Software-Vorteiler
  a2:	8d 38       	cpi	r24, 0x8D	; 141
  a4:	9b 45       	sbci	r25, 0x5B	; 91
  a6:	3c f0       	brlt	.+14     	; 0xb6 <polling_init+0x32>
	{
		PORTC=~PORTC;			//LED-Staten aller LED's umschalten
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	80 95       	com	r24
  ac:	85 bb       	out	0x15, r24	; 21
		count=0;				//Zählvariable auf 0
  ae:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	08 95       	ret

000000b8 <timer_init>:
	}
}

void timer_init()
{
	TCCR0|= 1<<CS00;			//Hardware-Vorteiler initialisieren kH=1
  b8:	83 b7       	in	r24, 0x33	; 51
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	83 bf       	out	0x33, r24	; 51
  be:	08 95       	ret

000000c0 <main>:
								//Systemtakt/1 eingestellt
}

int main(void)
{
	port_init();			//Zugriff auf PORT initialisierung
  c0:	0e 94 3e 00 	call	0x7c	; 0x7c <port_init>
	timer_init();			//Zugriff auf Timer initialisierung
  c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <timer_init>
    /* Replace with your application code */
    while (1) 
    {
		polling_init();		//Zugriff auf Polling
  c8:	0e 94 42 00 	call	0x84	; 0x84 <polling_init>
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <main+0x8>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
