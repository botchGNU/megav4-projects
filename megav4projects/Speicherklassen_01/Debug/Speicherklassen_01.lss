
Speicherklassen_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000012e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000615  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059c  00000000  00000000  000007d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f7  00000000  00000000  00000d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000309  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 00 	call	0x90	; 0x90 <main>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <test>:
  //unsigned char x=0;
  static unsigned char x; // Z?hlvariable, lokal nur in Block "test" g?ltig; 
                          // ...statisch im SRAM angelegt, Startwert Null
                          // ...Inhalt von x bleibt nach Ausstieg aus test() erhalten

  a_global=0xee;   // globale Variable modifizieren und in SRAM ablegen
  7c:	8e ee       	ldi	r24, 0xEE	; 238
  7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <a_global>
  PORTB = ++x;	   // ...x inkrementieren und in SRAM ablegen (x lokal vereinbart!)
  82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	08 95       	ret

00000090 <main>:
int main(void)	// Beginn Block "main" 
{ 
  while(1) // Beginn Block "Arbeitschleife"
  { 
	
	a_global=1; // globale Variable "a_global" ?ndern
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <a_global>
	
	test();	// Funktionsaufruf ? Block ?test? wird abgearbeitet
  96:	0e 94 3e 00 	call	0x7c	; 0x7c <test>
	        // ...globale Variable "a_global" wird in Funktion ver?ndert (neuer Wert: 0xee); 
		    // ...lokale Varible "x" wird modifiziert(inkrement)
		    // ...globale Variable "x" bleibt unver?ndert
	
	x = a_global; // globale Variable "x" ?ndern: x:=0xee
  9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <a_global>
  9e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <x>
	
	if (x == 0xee) PORTD=0x11; 
  a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <x>
  a6:	8e 3e       	cpi	r24, 0xEE	; 238
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x20>
  aa:	81 e1       	ldi	r24, 0x11	; 17
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	f0 cf       	rjmp	.-32     	; 0x90 <main>
	else PORTD = 0xFF; // SPEICHERTEST f?r SRAM-Zellen "x" und "a_global"
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	ed cf       	rjmp	.-38     	; 0x90 <main>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
