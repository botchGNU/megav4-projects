
TIMER0_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000134  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c8  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054e  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001eb  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f8  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

 unsigned int count = 0; // 16Bit Softwarez?hler vereinbaren
 
 int main( void )  // *** Hauptprogramm ***
 {
   DDRC  = 0xFF; // LED-Port als Ausgang konfigurieren
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
   PORTC = 0x00; // alle LEDs aus
  80:	15 ba       	out	0x15, r1	; 21
   TCCR0 |= (1<<CS00); // Teilungsfaktor Hardware-Vorteiler einstellen: kH = 1
  82:	83 b7       	in	r24, 0x33	; 51
  84:	81 60       	ori	r24, 0x01	; 1
  86:	83 bf       	out	0x33, r24	; 51

   while(1) // Arbeitsschleife
   {
     while (!(TIFR & (1<<TOV0))) {;} //polling auf Interruptflag f?r Timer0-Overflow
  88:	08 b6       	in	r0, 0x38	; 56
  8a:	00 fe       	sbrs	r0, 0
  8c:	fd cf       	rjmp	.-6      	; 0x88 <main+0xc>
     TIFR |= (1<<TOV0);   //Interruptflag zur?cksetzen
  8e:	88 b7       	in	r24, 0x38	; 56
  90:	81 60       	ori	r24, 0x01	; 1
  92:	88 bf       	out	0x38, r24	; 56
     count++;             //Softwarez?hler inkrementieren
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     if(count >= COUNT_MAX)  //Halbe Blinkperiode (hier: 0,5sec) vergangen?
  a6:	8d 38       	cpi	r24, 0x8D	; 141
  a8:	9b 45       	sbci	r25, 0x5B	; 91
  aa:	70 f3       	brcs	.-36     	; 0x88 <main+0xc>
     {
	   count = 0;       //Softwarez?hler r?cksetzen
  ac:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	   PORTC = ~PORTC;  //alle LEDs umschalten (hier nach jeweils 0,5s)
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	80 95       	com	r24
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	e6 cf       	rjmp	.-52     	; 0x88 <main+0xc>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
