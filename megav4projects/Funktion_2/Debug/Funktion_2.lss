
Funktion_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000647  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b3  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <arith_mitt>:
 */ 

#include <avr/io.h>

signed int arith_mitt(signed char feld[], signed char length) //Referenz des Feldes wird übergeben
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	9f 83       	std	Y+7, r25	; 0x07
  82:	8e 83       	std	Y+6, r24	; 0x06
  84:	68 87       	std	Y+8, r22	; 0x08
	signed long myVal = 0; //Hilfsvariable wird deklariert und auf 0 gesetzt
  86:	19 82       	std	Y+1, r1	; 0x01
  88:	1a 82       	std	Y+2, r1	; 0x02
  8a:	1b 82       	std	Y+3, r1	; 0x03
  8c:	1c 82       	std	Y+4, r1	; 0x04
	
	for (signed char i = 0 ; i < length; i++) //For Schleife für jedes Element im Array
  8e:	1d 82       	std	Y+5, r1	; 0x05
  90:	1e c0       	rjmp	.+60     	; 0xce <arith_mitt+0x62>
	{
		myVal += feld[i];
  92:	8d 81       	ldd	r24, Y+5	; 0x05
  94:	08 2e       	mov	r0, r24
  96:	00 0c       	add	r0, r0
  98:	99 0b       	sbc	r25, r25
  9a:	2e 81       	ldd	r18, Y+6	; 0x06
  9c:	3f 81       	ldd	r19, Y+7	; 0x07
  9e:	82 0f       	add	r24, r18
  a0:	93 1f       	adc	r25, r19
  a2:	fc 01       	movw	r30, r24
  a4:	80 81       	ld	r24, Z
  a6:	08 2e       	mov	r0, r24
  a8:	00 0c       	add	r0, r0
  aa:	99 0b       	sbc	r25, r25
  ac:	aa 0b       	sbc	r26, r26
  ae:	bb 0b       	sbc	r27, r27
  b0:	29 81       	ldd	r18, Y+1	; 0x01
  b2:	3a 81       	ldd	r19, Y+2	; 0x02
  b4:	4b 81       	ldd	r20, Y+3	; 0x03
  b6:	5c 81       	ldd	r21, Y+4	; 0x04
  b8:	82 0f       	add	r24, r18
  ba:	93 1f       	adc	r25, r19
  bc:	a4 1f       	adc	r26, r20
  be:	b5 1f       	adc	r27, r21
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	ab 83       	std	Y+3, r26	; 0x03
  c6:	bc 83       	std	Y+4, r27	; 0x04

signed int arith_mitt(signed char feld[], signed char length) //Referenz des Feldes wird übergeben
{
	signed long myVal = 0; //Hilfsvariable wird deklariert und auf 0 gesetzt
	
	for (signed char i = 0 ; i < length; i++) //For Schleife für jedes Element im Array
  c8:	8d 81       	ldd	r24, Y+5	; 0x05
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	8d 83       	std	Y+5, r24	; 0x05
  ce:	9d 81       	ldd	r25, Y+5	; 0x05
  d0:	88 85       	ldd	r24, Y+8	; 0x08
  d2:	98 17       	cp	r25, r24
  d4:	f4 f2       	brlt	.-68     	; 0x92 <arith_mitt+0x26>
	{
		myVal += feld[i];
	}
	myVal = myVal / length; //Wert wird durch Anzahl der Elemente geteilt
  d6:	88 85       	ldd	r24, Y+8	; 0x08
  d8:	28 2f       	mov	r18, r24
  da:	88 0f       	add	r24, r24
  dc:	33 0b       	sbc	r19, r19
  de:	44 0b       	sbc	r20, r20
  e0:	55 0b       	sbc	r21, r21
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	ab 81       	ldd	r26, Y+3	; 0x03
  e8:	bc 81       	ldd	r27, Y+4	; 0x04
  ea:	bc 01       	movw	r22, r24
  ec:	cd 01       	movw	r24, r26
  ee:	0e 94 9c 00 	call	0x138	; 0x138 <__divmodsi4>
  f2:	da 01       	movw	r26, r20
  f4:	c9 01       	movw	r24, r18
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	ab 83       	std	Y+3, r26	; 0x03
  fc:	bc 83       	std	Y+4, r27	; 0x04
	return myVal; //Ergebnis wird zurückgegeben
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
}
 102:	28 96       	adiw	r28, 0x08	; 8
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <main>:

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x8>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
    signed char zahl1[] = {3,5};  //Array wird deklariert
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	8b 83       	std	Y+3, r24	; 0x03
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	8c 83       	std	Y+4, r24	; 0x04
		
	signed int result_mitt = arith_mitt(zahl1, 2); //Ergebnis wird in Variable gespeichert
 128:	ce 01       	movw	r24, r28
 12a:	03 96       	adiw	r24, 0x03	; 3
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	0e 94 36 00 	call	0x6c	; 0x6c <arith_mitt>
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	89 83       	std	Y+1, r24	; 0x01
	
	while (1){}
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x22>

00000138 <__divmodsi4>:
 138:	05 2e       	mov	r0, r21
 13a:	97 fb       	bst	r25, 7
 13c:	1e f4       	brtc	.+6      	; 0x144 <__divmodsi4+0xc>
 13e:	00 94       	com	r0
 140:	0e 94 b3 00 	call	0x166	; 0x166 <__negsi2>
 144:	57 fd       	sbrc	r21, 7
 146:	07 d0       	rcall	.+14     	; 0x156 <__divmodsi4_neg2>
 148:	0e 94 bb 00 	call	0x176	; 0x176 <__udivmodsi4>
 14c:	07 fc       	sbrc	r0, 7
 14e:	03 d0       	rcall	.+6      	; 0x156 <__divmodsi4_neg2>
 150:	4e f4       	brtc	.+18     	; 0x164 <__divmodsi4_exit>
 152:	0c 94 b3 00 	jmp	0x166	; 0x166 <__negsi2>

00000156 <__divmodsi4_neg2>:
 156:	50 95       	com	r21
 158:	40 95       	com	r20
 15a:	30 95       	com	r19
 15c:	21 95       	neg	r18
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	4f 4f       	sbci	r20, 0xFF	; 255
 162:	5f 4f       	sbci	r21, 0xFF	; 255

00000164 <__divmodsi4_exit>:
 164:	08 95       	ret

00000166 <__negsi2>:
 166:	90 95       	com	r25
 168:	80 95       	com	r24
 16a:	70 95       	com	r23
 16c:	61 95       	neg	r22
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	8f 4f       	sbci	r24, 0xFF	; 255
 172:	9f 4f       	sbci	r25, 0xFF	; 255
 174:	08 95       	ret

00000176 <__udivmodsi4>:
 176:	a1 e2       	ldi	r26, 0x21	; 33
 178:	1a 2e       	mov	r1, r26
 17a:	aa 1b       	sub	r26, r26
 17c:	bb 1b       	sub	r27, r27
 17e:	fd 01       	movw	r30, r26
 180:	0d c0       	rjmp	.+26     	; 0x19c <__udivmodsi4_ep>

00000182 <__udivmodsi4_loop>:
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	ee 1f       	adc	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	a2 17       	cp	r26, r18
 18c:	b3 07       	cpc	r27, r19
 18e:	e4 07       	cpc	r30, r20
 190:	f5 07       	cpc	r31, r21
 192:	20 f0       	brcs	.+8      	; 0x19c <__udivmodsi4_ep>
 194:	a2 1b       	sub	r26, r18
 196:	b3 0b       	sbc	r27, r19
 198:	e4 0b       	sbc	r30, r20
 19a:	f5 0b       	sbc	r31, r21

0000019c <__udivmodsi4_ep>:
 19c:	66 1f       	adc	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	88 1f       	adc	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	1a 94       	dec	r1
 1a6:	69 f7       	brne	.-38     	; 0x182 <__udivmodsi4_loop>
 1a8:	60 95       	com	r22
 1aa:	70 95       	com	r23
 1ac:	80 95       	com	r24
 1ae:	90 95       	com	r25
 1b0:	9b 01       	movw	r18, r22
 1b2:	ac 01       	movw	r20, r24
 1b4:	bd 01       	movw	r22, r26
 1b6:	cf 01       	movw	r24, r30
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
